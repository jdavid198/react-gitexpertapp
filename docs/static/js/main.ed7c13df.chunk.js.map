{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGits.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","alt","src","GifGrid","loading","state","setstate","useEffect","then","setTimeout","useFetchGits","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACI,sBAAMC,SATc,SAACC,GACrBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAG,OAAGP,GAAH,mBAAiBO,OAClCN,EAAc,MAKlB,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAbtB,SAACP,GACrBF,EAAcE,EAAEQ,OAAOF,a,+BCLlBG,EAAO,uCAAC,WAAMC,GAAN,uBAAAC,EAAA,6DACXC,EADW,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEXG,EAFW,gBAGEA,EAAKC,OAHP,uBAGVC,EAHU,EAGVA,KAEDC,EAAMD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACtB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATzB,kBAYTM,GAZS,4CAAD,sDCEPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAC/B,OACI,sBAAKc,UAAU,2DAAf,UACG,qBAAKC,IAAKL,EAAOM,IAAKhB,IACtB,4BAAIU,QCDFO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAOrB,ECTwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OAVAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAhB,GAAI,OACvBiB,YAAW,WACPH,EAAS,CACLf,KAAKC,EACLY,SAAQ,MAEb,UAET,CAACpB,IACIqB,EDNqBK,CAAa1B,GAA7Ba,EAAZ,EAAON,KAAYa,EAAnB,EAAmBA,QAEnB,OACI,qCACI,oBAAIJ,UAAU,sDAAd,SAAqEhB,IAEjEoB,GAAW,aAEf,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEnBjCgB,EAAe,WAExB,MAAoCzC,mBAAS,CACrC,cADR,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAIA,OACI,qCACI,oBAAI+B,UAAU,wCAAd,0BACA,cAAC,EAAD,CAAa/B,cAAeA,IAC5B,uBAEQ2C,EAAWnB,KAAI,SAACT,EAAS6B,GAAV,OACX,cAAC,EAAD,CAAiB7B,SAAUA,GAAb6B,U,MCZtCC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ed7c13df.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes  from'prop-types';\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    const handleInputChange=(e)=>{\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleInputSubmit=(e)=>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length>2){\r\n            setCategories(cat=>[inputValue,...cat]);\r\n            setInputValue(\"\");\r\n        }\r\n\r\n    }\r\n    return (\r\n        <form onSubmit={handleInputSubmit}>\r\n            <input type=\"text\" value={inputValue} onChange={handleInputChange}/>\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes={\r\n    setCategories:PropTypes.func.isRequired\r\n}\r\n","export const getGifs=async(category)=>{\r\n    const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=lFYOXjqmGPjR5eQl49hGWAN03Cz9PyJy`;\r\n    const resp=await fetch(url);\r\n    const {data}=await resp.json();\r\n    \r\n    const gifs= data.map(img=>{\r\n        return {\r\n            id:img.id,\r\n            title:img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return  gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce animate__delay-2s\">\r\n           <img alt={title} src={url} />\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGits } from '../hooks/useFetchGits'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    // const [images, setImages] = useState([])\r\n    // useEffect(()=>{\r\n    //     getGifs(category).then(setImages);\r\n    // },[category])\r\n\r\n    const {data:images,loading}=useFetchGits(category);\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"animate__animated animate__bounce animate__delay-2s\">{category}</h1>\r\n            {\r\n                loading && 'Cargando..'\r\n            }\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map((img)=> \r\n                        <GifGridItem key={img.id} {...img}/>\r\n                    )\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGits = (category) => {\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    })\r\n    useEffect(()=>{\r\n        getGifs(category).then(gifs=>\r\n            setTimeout(() => {\r\n                setstate({\r\n                    data:gifs,\r\n                    loading:false\r\n                })\r\n            }, 2000)\r\n        );\r\n    },[category])\r\n    return state;\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([\r\n            'One Punch',\r\n        ]);\r\n    \r\n    return (\r\n        <>\r\n            <h2 className=\"animate__animated animate__backInLeft\">GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n                {\r\n                    categories.map((category,i)=> \r\n                        <GifGrid key={i} category={category} />\r\n                    )\r\n                }\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}